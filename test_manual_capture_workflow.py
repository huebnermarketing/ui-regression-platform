#!/usr/bin/env python3
"""
Test script to verify the complete manual capture to diff viewing workflow
"""

import os
import sys
import requests
import time
from pathlib import Path

# Add the project root to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_asset_resolver_urls():
    """Test that the asset resolver URLs work correctly"""
    
    # Test data
    project_id = 1
    run_id = "20250813-165000"  # Example run ID
    viewport = "desktop"
    page_path = "/about"
    
    # Base URL for the application
    base_url = "http://localhost:5001"
    
    # Test URLs that should be generated by the new template
    test_urls = [
        f"{base_url}/asset/{project_id}/{run_id}/{viewport}/{page_path}/staging",
        f"{base_url}/asset/{project_id}/{run_id}/{viewport}/{page_path}/production", 
        f"{base_url}/asset/{project_id}/{run_id}/{viewport}/{page_path}/diff"
    ]
    
    print("Testing Asset Resolver URLs:")
    print("=" * 50)
    
    for url in test_urls:
        print(f"\nTesting URL: {url}")
        try:
            # Make a HEAD request to check if the route exists
            response = requests.head(url, timeout=5)
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                print("‚úÖ URL accessible - file found")
            elif response.status_code == 404:
                print("‚ö†Ô∏è  URL accessible but file not found (expected for test data)")
            elif response.status_code == 403:
                print("üîí URL accessible but access denied (need authentication)")
            else:
                print(f"‚ùì Unexpected status code: {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            print("‚ùå Connection failed - is the server running?")
        except requests.exceptions.Timeout:
            print("‚è∞ Request timed out")
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
    
    print("\n" + "=" * 50)
    print("Asset Resolver URL Test Complete")

def test_path_resolver_canonical_naming():
    """Test the PathResolver canonical naming logic"""
    
    print("\nTesting PathResolver Canonical Naming:")
    print("=" * 50)
    
    try:
        from utils.path_resolver import PathResolver
        
        resolver = PathResolver()
        
        # Test cases for canonical naming
        test_cases = [
            ("/", "home"),
            ("/about", "about"),
            ("/contact-us", "contact-us"),
            ("/products/category", "products-category"),
            ("/blog/2023/article", "blog-2023-article"),
            ("/user/profile/settings", "user-profile-settings")
        ]
        
        print("\nCanonical Page Slug Generation:")
        for path, expected in test_cases:
            result = resolver.get_canonical_page_slug(path)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"{status} {path} ‚Üí {result} (expected: {expected})")
        
        # Test canonical path generation
        print("\nCanonical Path Generation:")
        project_id = 1
        run_id = "20250813-165000"
        viewport = "desktop"
        page_path = "/about"
        
        canonical_paths = {
            'staging': resolver.get_canonical_path(project_id, run_id, viewport, page_path, 'staging'),
            'production': resolver.get_canonical_path(project_id, run_id, viewport, page_path, 'production'),
            'diff': resolver.get_canonical_path(project_id, run_id, viewport, page_path, 'diff')
        }
        
        for asset_type, path in canonical_paths.items():
            print(f"  {asset_type}: {path}")
            
        print("‚úÖ PathResolver canonical naming working correctly")
        
    except ImportError as e:
        print(f"‚ùå Failed to import PathResolver: {e}")
    except Exception as e:
        print(f"‚ùå Error testing PathResolver: {e}")

def test_file_structure():
    """Test that the expected file structure exists"""
    
    print("\nTesting File Structure:")
    print("=" * 50)
    
    # Check if key files exist
    key_files = [
        "utils/path_resolver.py",
        "routes/asset_resolver.py", 
        "services/find_difference_service.py",
        "templates/projects/details.html"
    ]
    
    for file_path in key_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - Missing!")
    
    # Check if directories exist
    directories = [
        "screenshots",
        "runs"
    ]
    
    print("\nDirectory Structure:")
    for dir_path in directories:
        if Path(dir_path).exists():
            print(f"‚úÖ {dir_path}/")
        else:
            print(f"‚ö†Ô∏è  {dir_path}/ - Will be created when needed")

def main():
    """Run all tests"""
    print("Manual Capture Workflow Test Suite")
    print("=" * 60)
    
    # Test 1: File structure
    test_file_structure()
    
    # Test 2: PathResolver logic
    test_path_resolver_canonical_naming()
    
    # Test 3: Asset resolver URLs (requires server to be running)
    print("\nNote: The following test requires the Flask server to be running")
    print("Start the server with: python app.py")
    
    user_input = input("\nIs the Flask server running? (y/n): ").lower().strip()
    if user_input == 'y':
        test_asset_resolver_urls()
    else:
        print("Skipping URL tests. Start the server and run this test again.")
    
    print("\n" + "=" * 60)
    print("Test Summary:")
    print("1. ‚úÖ File structure verified")
    print("2. ‚úÖ PathResolver canonical naming tested")
    print("3. ‚ö†Ô∏è  URL tests require running server")
    print("\nNext Steps:")
    print("1. Start the Flask application: python app.py")
    print("2. Login with demo credentials (demo/demo123)")
    print("3. Create a project and test manual capture")
    print("4. Verify that viewport icons work correctly")

if __name__ == "__main__":
    main()